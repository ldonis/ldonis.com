/*
* Lesli CSS
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*
* CSS version 3
*
* Grids & blocks system
*
* @author   Luis Gdonis <emc2@ldonis.com>
* @license  GPLv3 http://www.gnu.org/licenses/gpl-3.0.en.html
* @version  0.1.0
* @link     https://www.lesli.tech
*/

// Funciones y Mixins para construir el grid
// -·-  -·-  -·-  -·-  -·-  -·-  -·-  -·-  -·-  -·-  -·-  -·-  -·-  -·-  -·-

/*
* Retorna el nombre de la clase
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <https://www.lesli.tech>
* @since 0.1.0 alpha
*/
lesli-grid--get-class-name(column-number, column-prefix = 'col')

    // si el numero de columna es menor a 10, se agrega un cero al inicio
    if column-number < 10
        column-number = '0' + column-number

    // arma nombre de clase css
    return column-prefix + '-' + column-number


/*
* Retorna el nombre de la clase
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <https://www.lesli.tech>
* @since 2.0.0
*/
lesli-grid--get-column-width(column, column-total, margin)

    // Variables
    $column-number = column
    $column-total = column-total
    $margin = margin

    // El total del margen en todo el grid sera igual al total de
    // columnas por el porcentaje de margen asignado
    // La primera columna del grid no lleva margen
    // por tal razon se resta dicha columna al total de columnas
    $margin = $margin * ( $column-number - 1 )

    // Columns are generated automatically?
    // La formula es diferente dependendiendo si las columnas
    // seran simetricas o no
    if $column-total == 0
        
        // El ancho de cada columna sera igual al ancho disponible (menos margen)
        // dividido entre el total de columnas del grid
        $width = ((100 - $margin) / $column-number)
        
    else
        
        $width = ((100 / $column-total) * $column-number) - $margin
        

    // Se retorna el ancho de columna
    return $width


/*
* Columnas de grids & blocks
* Crea columnas individuales
*
* @param column int Numero de columna 
* @param column-total Total de columnas
*
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <https://www.lesli.tech>
* @since 0.1.0 alpha
*/
lesli-grid-column(column, column-total = 12, margin=0)
    
    // Variables
    $column-number = column     // Numero de columnas
    $column-number-total = column-total // Numero total de columnas para el grid
    
    // Obtiene el ancho de cada columna
    $column-width =  lesli-grid--get-column-width($column-number, $column-number-total, margin)
    
    // Imprime el width para cada columna
    width unit($column-width, '%')


/*
* Grids & Blocks automaticos
* Genera estilos para el contenedor del grid y para cada una de las columnas
* que se especificaron en los parametros
*
* @param columns int Cantidad de columnas a incluir en el grid
* @param margin int Margen entre columnas
* @param breakpoint int Breakpoint a generar en pixeles
*
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <https://www.lesli.tech>
* @since 0.1.0 alpha
*/
lesli-grid(columns = 0, margin=0, breakpoint=320)
    
    // Variables
    $lesli-grid-columns = columns
    $lesli-grid-breakpoint = breakpoint
    $lesli-grid-columns-margin = margin

    // basic styles for grid container
    width 100%
    font-size 0
    
    // * Estilos a pseudo elementos
    &:before
    &:after
        content ""
        display inline-block
        vertical-align middle
        height 100%
        
    // * Filas del grid
    & > *
        font-size initial
        white-space initial
        display inline-block

    // Si el grid incluye margen
    if $lesli-grid-columns-margin > 0
        
        // * Margen de cada elemento del grid,
        & > *:not(:last-child)
            margin-right unit($lesli-grid-columns-margin, '%')

    // automatic columns 
    if columns > 0
        
        //$lesli-grid-width-percent = rgrid-GetColumnWidth($lesli-grid-columns, $lesli-grid-columns-margin)
        $lesli-grid-class-name = lesli-grid--get-class-name(columns)
            
        // Genera la clase css para el ancho de cada columna automatica
        &.{$lesli-grid-class-name} > *
            
            // Utilizo el mixin para crear columnas
            lesli-grid-column(column: $lesli-grid-columns, margin: $lesli-grid-columns-margin)
            
    // inicializa breakpoints
    @media (max-width: unit($lesli-grid-breakpoint, 'px'))

        // Clase css para breakpoints
        $lesli-grid-breakpoint-class-name = 'r' + $lesli-grid-breakpoint

        &.{$lesli-grid-breakpoint-class-name} > *
            width 100%
